<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_charger.ChargerUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>ChargerUtils</name>
        <script><![CDATA[var ChargerUtils = Class.create();
ChargerUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	initialize : function(){
		this.constants = this.getConstants();
	},
	getConstants : function(){
		var constants = {
			TABLE_CHARGERS: 'x_snc_charger_charger',
			TABLE_QUEUE: 'x_snc_charger_charge_event',
			TABLE_REGISTRATION: 'x_snc_charger_driver',
			TABLE_VEHICLES: 'x_snc_charger_vehicle',
		};
		
		return constants;
	},
	getMyLocation : function(_user){
		var reg = new GlideRecord(this.constants.TABLE_REGISTRATION);
		reg.get('user',_user);
		return reg.getValue('location');
	},
	getRegistrationFromUser : function(_user){
		var reg = new GlideRecord(this.constants.TABLE_REGISTRATION);
		reg.get('user',_user);
		return reg.getUniqueValue();
	},
	getPrimaryVehicle : function(_user){
		var vehicle = new GlideRecord(this.constants.TABLE_VEHICLES);
		vehicle.addEncodedQuery('owner.user='+_user+'^primary_vehicle=true');
		vehicle.query();
		if(!vehicle.hasNext()){
			return;
		}
		if(vehicle.next()){
			return vehicle.getUniqueValue();
		}

	},
	getChargerIDByUser : function(_user, _state=''){
		var chargeEvent = new GlideRecord(this.constants.TABLE_QUEUE);
		chargeEvent.addQuery('requested_by',_user);
		if(_state && _state!=''){
			chargeEvent.addQuery('state',_state);
		}
		chargeEvent.query();
		if(chargeEvent.next()){
			return chargeEvent.getValue('charger');
		}
	},
	getChargeSession : function(_query=''){
		var answer = {};
		var chargeEvent = new GlideRecord(this.constants.TABLE_QUEUE);
		if(_query && _query!=''){
			chargeEvent.addEncodedQuery(_query);
		}
		chargeEvent.query();
		if(chargeEvent.next()){
			answer.filter = chargeEvent.getEncodedQuery();
			answer.charger = chargeEvent.getValue('charger');
			answer.charge_event = chargeEvent.getUniqueValue();			
		} else {
			return null;
		}
		return answer;	
	},
	getChargeSessionByUser : function(_user, _state='', _query=''){
		var answer = {};
		var chargeEvent = new GlideRecord(this.constants.TABLE_QUEUE);
		chargeEvent.addQuery('requested_by',_user);
		if(_state && _state!=''){
			chargeEvent.addQuery('state',_state);
		}
		if(_query && _query!=''){
			chargeEvent.addEncodedQuery(_query);
		}
		chargeEvent.query();
		if(chargeEvent.next()){
			answer.filter = chargeEvent.getEncodedQuery();
			answer.charger = chargeEvent.getValue('charger');
			answer.charge_event = chargeEvent.getUniqueValue();			
		} else {
			return null;
		}
		return answer;
	},
    type: 'ChargerUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>aaron.brunet</sys_created_by>
        <sys_created_on>2024-03-14 00:44:29</sys_created_on>
        <sys_id>f532efeb87bc4a106e4b11f83cbb3520</sys_id>
        <sys_mod_count>18</sys_mod_count>
        <sys_name>ChargerUtils</sys_name>
        <sys_package display_value="Charger" source="x_snc_charger">7a4ce69387e04a106e4b11f83cbb3517</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Charger">7a4ce69387e04a106e4b11f83cbb3517</sys_scope>
        <sys_update_name>sys_script_include_f532efeb87bc4a106e4b11f83cbb3520</sys_update_name>
        <sys_updated_by>aaron.brunet</sys_updated_by>
        <sys_updated_on>2024-03-14 23:41:54</sys_updated_on>
    </sys_script_include>
</record_update>
